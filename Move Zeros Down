/*
* Author: Yang Pei
* Problem: Move Zeros Down
* 
* Note:
* Given a binary tree, move the zeros to the bottom, so that if a node's value is 0,2 U; R- @1 r/ K9 z1 V
* any of its descendant are 0s.
* For example:
*      1
*     / \
*    0   0
*   / \   \
*  2   0   3
* could be changed to
*      1
*     / \
*    2   3
*   / \   \
*  0   0   0   

import java.util.LinkedList;
import java.util.Queue;


class TreeNode{
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x){val = x;}
	
}
public class MoveZeroDown {
	public static void PrintBST(TreeNode root){
		Queue<TreeNode> q =  new LinkedList<TreeNode>();
		q.offer(root);
		int size = q.size();
		while(!q.isEmpty()){
			TreeNode node = q.poll();
			System.out.print(node.val);
			size--;
			if(node.left != null){
				q.offer(node.left);
			}
			if(node.right != null){
				q.offer(node.right);
			}
			if(size == 0){
				System.out.println();
				size = q.size();
			}
		}
	}
	public static void movedown(TreeNode root){
		if(root == null){return;}
		movedown(root.left);
		movedown(root.right);
		if(root.val == 0){
			if(root.left != null && root.left.val != 0){
				root.val = root.left.val;
				root.left.val = 0;
			}else if(root.right != null && root.right.val != 0){
				root.val = root.right.val;
				root.right.val = 0;
			}
		}
	}
	public static void main(String[] args){
		TreeNode node1 = new TreeNode(1); 
        node1.left = new TreeNode(0);
        node1.right = new TreeNode(0);
        node1.left.left = new TreeNode(2);
        node1.left.right = new TreeNode(0);
        node1.right.right = new TreeNode(3);
        /*node1.right.right = new TreeNode(5);
        node1.left.right.left = new TreeNode(4);
        node1.left.right.right = new TreeNode(0);
        */
        PrintBST(node1);
        movedown(node1);
        System.out.println("");
        PrintBST(node1);
	}
}
